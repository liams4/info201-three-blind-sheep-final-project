b
source('~/INFO 201/in-class/4-24/babynames.R')
source('~/INFO 201/in-class/4-24/babynames.R')
source('~/INFO 201/in-class/4-24/babynames.R')
head(babynames)
head(babynames)
head(babynames)
subset <- babynames[babynames$year == 1998 ,]
subset <- subset[subset$sex == "M"]
subset <- subset[subset$sex == "M",]
dim(subset)
i <- which.max(subset$name)
i
dim(subset)
i <- which.max(babynames$n)
i
i <- which.max(subset$n)
i
which.max(c(1,2,3,4,4,3,2))
subset[i,]
subset <- babynames[babynames$year == 1998,]
subset <- subset[subset$sex == "F",]
i <- which.max(subset$n)
i
subset[i,]
subset <- babynames[(babynames$year == 1998) & (babynames$sex == "F"),]
i <- which.max(subset$n)
subset[i,]
a <- select(babynames, -year)
install.packages("dplyr")
library(dplyr)
a <- select(babynames, -year)
a
a <- select(babynames, -prop)
a <- select(babynames, name, n)
a
a <- select(babynames, name, n, -n)
a
a <- select(babynames, name, n)
a <- filter(babynames, year == 1999)
a
a <- filter(a, name == Emily)
a <- filter(a, name == "Emily")
a
a <- filter(babynames, name == "John")
a
a <- filter(a, year == 2000)
a
a <- filter(babynames, name == "John")
a <- filter(babynames, name == "Alex")
a <- filter(babynames, name == "Alex", year == 1999)
a
a <- filter(babynames, name == "Alex", year == 1998)
a
a <- mutate(babynames, name_sex=pase(name,sex,sep="-"))
a <- mutate(babynames, name_sex=paste(name,sex,sep="-"))
a
a <- mutate(babynames, name=tolower(name))
a
a <- mutate(babynames, year=year-1000)
a
a <- filter(babynames, year == 2000, sex == "F", n < 1000)
a
a <- arrange(a, n)
a
a <- arrange(a, desc(n)
a <- arrange(a, desc(n))
a <- arrange(a, desc(n))
a
babynames %>% select(-prop) %>%
filter(year == 2000)%>%
filter(sex == "F") %>%
filter(n < 1000) %>%
filter(max_rank(n) == 1)
babynames %>% select(-prop) %>%
filter(year == 2000) %>%
filter(sex == "F") %>%
filter(n < 1000) %>%
filter(max_rank(desc(n) == 1)
filter(max_rank(desc(n)) == 1)
babynames %>% select(-prop) %>%
filter(year == 2000) %>%
filter(sex == "F") %>%
filter(n < 1000) %>%
filter(max_rank(desc(n)) == 1)
filter(min_rank(desc(n)) == 1)
babynames %>% select(-prop) %>%
filter(year == 2000) %>%
filter(sex == "F") %>%
filter(n < 1000) %>%
arrange(min_rank(desc(n)) == 1)
arrange(min_rank(desc(n)) == 0)
babynames %>% select(-prop) %>%
filter(year == 2000) %>%
filter(sex == "F") %>%
filter(n < 1000) %>%
filter(min_rank(desc(n)) == 0)
babynames %>% select(-prop) %>%
filter(year == 2000) %>%
filter(sex == "F") %>%
filter(n < 1000) %>%
filter(min_rank(desc(n)) == 1)
source('~/INFO 201/in-class/5-8/api.R')
install.packages("jsonlite")
library(jsonlite)
library(dplyr)
content(res) %>% jsonlite::toJSON()
content(res) %>% fromJSON()
content(res, "text") %>% fromJSON()
source('~/INFO 201/in-class/5-8/api.R')
data
class(data)
names(data)
setwd("INFO 201/info201-three-blind-sheep-final-project/")
shiny::runApp()
data <- read.csv("data/states_all_extended.csv")
View(data)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("geojsonio")
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
runApp()
runApp()
filtered_2015 <- data %>%
filter("YEAR" == "2015")
filtered_2015 <- data %>%
filter("YEAR" == "2015") %>%
select(input$variable)
filtered_2015 <- data %>%
filter("YEAR" == "2015") %>%
select(input$variable)
runApp()
runApp()
map_data("usa")
runApp()
map_data("usa")
runApp()
runApp()
runApp()
usa$long
usa <- map_data("usa")
usa$long
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/test.R')
runApp('~/test.R')
runApp('~/test.R')
setwd("../../")
getwd()
runApp('test.R')
runApp('test.R')
runApp('INFO 201/info201-three-blind-sheep-final-project')
setwd("INFO 201/info201-three-blind-sheep-final-project/")
runApp()
filtered_2015 <- data %>%
filter(YEAR == 2015) %>%
mutate(STATE = tolower(STATE)) %>%
full_join(states, by=c("STATE" = "region")) %>%
select(input$variable, long, lat)
states <- map_data("state")
View(usa)
View(states)
head(filtered_2015, 5)
runApp()
spending_data_2015 <- spending_data %>% filter(YEAR == 2015)
spending_data <- data %>% select(STATE, YEAR, TOTAL_REVENUE, FEDERAL_REVENUE,
STATE_REVENUE, LOCAL_REVENUE, TOTAL_EXPENDITURE,
AVG_MATH_4_SCORE, AVG_MATH_8_SCORE,
AVG_READING_4_SCORE, AVG_READING_8_SCORE) %>%
filter(STATE != "AMERICAN_SAMOA", STATE != "BIE",
STATE != "DOD_DOMESTIC", STATE != "DOD_OVERSEAS",
STATE != "GUAM", STATE != "NORTHERN_MARIANAS",
STATE != "PUERTO_RICO", STATE != "VIRGIN_ISLANDS",
STATE != "BUREAU_OF_INDIAN_EDUCATION",
STATE != "DEPARTMENT_OF_DEFENSE_EDUCATION_ACTIVITY",
STATE != "U.S._VIRGIN_ISLANDS",
STATE != "DD", STATE != "BI",
STATE != "NORTHERN_MARIANA_ISLANDS")
spending_data_2015 <- spending_data %>% filter(YEAR == 2015)
runApp()
View(spending_data_2015)
runApp()
filtered_2015 <- spending_data_2015 %>%
filter(YEAR == 2015) %>%
mutate(STATE = tolower(STATE)) %>%
full_join(states, by=c("STATE" = "region")) %>%
select(STATE, input$variable, long, lat)
shinyServer(function(input, output) {
output$usaMap <- renderPlot({
states <- map_data("state")
filtered_2015 <- spending_data_2015 %>%
filter(YEAR == 2015) %>%
mutate(STATE = tolower(STATE)) %>%
full_join(states, by=c("STATE" = "region")) %>%
select(STATE, input$variable, long, lat)
ggplot() +
geom_polygon(data=states, aes(x=long, y=lat, group=group), fill=filtered_2015[input$variable]) +
coord_fixed(1.3)
})
# Gets all of spending the data specific to the year passed as a parameter
get_year_spending_data <- function(year) {
spending_data <- spending_data_2005
if (year == 2011) {
spending_data <- spending_data_2011
} else if (year == 2015) {
spending_data <- spending_data_2015
}
spending_data
}
# Creates a scatter plot of states' spending data in the year specified by
# the user versus the states' 8th grade scores in the test type specified
# by the user
output$spending_and_scores_over_time_plot <- renderPlot({
x_label <- paste('State Expenditure', input$year)
y_label <- paste0('State Grade 8 ', input$score_type, ' Score ', input$year)
year <- get_year_spending_data(input$year)
expenditure <- year$TOTAL_EXPENDITURE
scores <- year$AVG_READING_8_SCORE
if (input$score_type == 'Math') {
scores <- year$AVG_MATH_8_SCORE
}
ggplot() +
geom_point(aes(x=expenditure, y=scores)) +
labs(x = x_label, y = y_label)
})
# Prints a summary text about the "spending_and_scores_over_time_plot" plot
output$spending_and_scores_over_time_text <- renderText({
"This plot clearly shows/does not show that .."
})
})
states <- map_data("state")
filtered_2015 <- spending_data_2015 %>%
filter(YEAR == 2015) %>%
mutate(STATE = tolower(STATE)) %>%
full_join(states, by=c("STATE" = "region")) %>%
select(STATE, input$variable, long, lat)
filtered_2015 <- spending_data_2015 %>%
filter(YEAR == 2015) %>%
mutate(STATE = tolower(STATE)) %>%
full_join(states, by=c("STATE" = "region")) %>%
select(STATE, input$variable, long, lat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data
data %>% rename(average_math_8 = AVG_MATH_8_SCORE)
runApp()
filtered_2015 <- spending_data_2015 %>%
filter(YEAR == 2015) %>%
mutate(STATE = tolower(STATE)) %>%
full_join(states, by=c("STATE" = "region"))
View(filtered_2015)
runApp()
View(filtered_2015)
runApp()
runApp()
runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
